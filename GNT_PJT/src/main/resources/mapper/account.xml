<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="ns.sql.AccountMapper">
	<!-- 
	<resultMap type="account" id="userSelectMap">
		<result property="id" column="id" jdbcType="NUMERIC" />	
		<result property="name" column="name" jdbcType="VARCHAR" />	
		<result property="maker" column="maker" jdbcType="VARCHAR" />	
		<result property="price" column="price" jdbcType="NUMERIC" />
	</resultMap>
	 -->
	 
	<resultMap type="users" id="Userreg">
	 	<result property="userId" column="user_id" jdbcType="NUMERIC" />	
	 	<result property="userName" column="user_name" jdbcType="VARCHAR" />	
	 	<result property="userPassword" column="user_password" jdbcType="VARCHAR" />
	 	<result property="userEmail" column="user_email" jdbcType="VARCHAR" />
	 </resultMap>
	 
	 
	<!-- <insert id="createAcc" parameterType="account">
		<selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT TRUNC(DBMS_RANDOM.VALUE(power(10,16)+1, power(10,17)-1)) RANDOM FROM DUAL;
		</selectKey>
		
		INSERT	INTO account
		(acc_id, acc_password, create_time)
		(acc_id, card_id, acc_password, create_time, acc_amount, mileage)
		VALUES (#{id}, #{accPassword}, sysdate)
	</insert> -->
	
	<insert id="newUser" parameterType="users">
		<!-- <selectKey keyProperty="id" resultType="int" order="BEFORE">
			SELECT users_seq.nextVal FROM dual
		</selectKey> -->
		INSERT INTO
		USERS (user_id, user_password, user_name, user_email)
		VALUES (users_seq.nextVal, #{userPassword}, #{userName}, #{userEmail})
	</insert>
	
	
	<select id="selectUser" parameterType="users" resultMap="Userreg">
		SELECT
		USER_ID, USER_PASSWORD
		FROM USERS
		WHERE USER_ID=#{userId}
		<if test="USER_PASSWORD!=null">
			AND USER_PASSWORD=#{userPassword}
		</if>
	</select>
	
	<select id="getAccBalance" parameterType="string" resultType="int">
		SELECT acc_amount
		FROM account
		WHERE acc_id = #{VALUE}
	</select>
	
	<update id="depositAcc" parameterType="account">
		UPDATE account
		SET acc_amount = acc_amount 
		<if test="#{account.accAmount} lt 0">
		- ABS(#{account.accAmount})
		</if>
		<if test="#{account.accAmount} ge 0">
		+ ABS(#{account.accAmount})
		</if>
		WHERE acc_id = #{account.accId}
	</update>
	
	<update id="sendAcc" parameterType="accountTrans">
		UPDATE account a, account b
		SET (a.acc_amount, b.acc_amount) = 
		( SELECT acc_amount - #{accountTrans.accAmount} FROM account WHERE acc_id = #{accountTrans.senderAccId},
			SELECT acc_amount + #{accountTrans.accAmount} FROM account WHERE acc_id = #{accountTrans.receiverAccId},
		)
	</update>
	
	<insert id="createMile" parameterType="mileageHistory">
		<selectKey keyProperty="miId" resultType="int" order="BEFORE">
			SELECT mileage_seq.nextVal FROM dual
		</selectKey>
		INSERT	INTO mileageHistory
		(mileage_pk, acc_id, create_time, mileage_amount)
		<!-- (acc_id, card_id, acc_password, create_time, acc_amount, mileage) -->
		VALUES (#{miId}, #{accId}, sysdate, 0)
	</insert>
	
	<select id="getMileBalance" parameterType="string" resultType="int">
		SELECT rownum, *
			FROM (
				SELECT mileage_amount
				FROM mileage_history
				WHERE mileage_pk = #{VALUE}
				ORDER BY create_time desc
			)
		WHERE rownum = 1
	</select>
	
	<update id="addMile" parameterType="mileageHistory">
		UPDATE mileage_history
		SET mileage_amount = mileage_amount + #{mileageHistory.mileageAmount}
		WHERE mileage_pk = #{mileageHistory.mileagePk}
	</update>
	
<!-- 	<update id="sendAcc" parameterType="accountTrans">
		UPDATE account
		SET acc_amount = acc_amount - #{accountTrans.accAmount}
		WHERE acc_id = #{accountTrans.senderAccId}
	</update> -->
</mapper>